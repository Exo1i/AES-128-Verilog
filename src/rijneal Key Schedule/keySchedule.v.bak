`include "C:/Users/youss/AES-128-Verilog/src/Sbox/sboxModule.v"






module keyScheduleHelper(input wire[255:0]key128,input wire[11:0]keyType,input wire[3:0]roundNumber,output wire [31:0] processedW4);


  ///@details Does the subword step
  subWord(.givenData(key128[31:0]),.sboxRes(processedW4));
  assign processedW4 = {processedW4[30:0],processedW4[31]};
  rcon(.incomingData(processedW4),.processedData(processedW4),.crtRoundNumber(roundNumber));



endmodule


module subWord(input wire[31:0]incomingData,output wire[31:0]processedData);
  sboxModule(.givenData(incomingData[31:24]),.sboxRes(processedData[31:24]));
  sboxModule(.givenData(incomingData[23:16]),.sboxRes(processedData[23:16]));
  sboxModule(.givenData(incomingData[15:8]),.sboxRes(processedData[15:8]));
  sboxModule(.givenData(incomingData[7:0]),.sboxRes(processedData[7:0]));
endmodule

module rcon(input wire[31:0]incomingData,ouput wire[31:0]processedData,input wire[3:0]crtRoundNumber);
  always@(incomingData)
    reg [31:0]result;
  assign processedData = result;

  begin
    case(roundNumber)
      0:
        result = incomingData;
      1:
        result = incomingData xor 32'h01_00_00_00;
      2:
        result = incomingData xor 32'h02_00_00_00;
      3:
        result = incomingData xor 32'h04_00_00_00;
      4:
        result = incomingData xor 32'h08_00_00_00;
      5:
        result = incomingData xor 32'h10_00_00_00;
      6:
        result = incomingData xor 32'h20_00_00_00;
      7:
        result = incomingData xor 32'h40_00_00_00;
      8:
        result = incomingData xor 32'h80_00_00_00;
      9:
        result = incomingData xor 32'h1B_00_00_00;
      10:
        result = incomingData xor 32'h36_00_00_00;
      11:
        result = incomingData xor 32'h6c_00_00_00;
      12:
        result = incomingData xor 32'hd8_00_00_00;
      13:
        result = incomingData xor 32'hab_00_00_00;
      14:
        result = incomingData xor 32'h4d_00_00_00;
    endcase
  end
  ///@details for 192 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8
  ///@details for 256 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d
  ///@details for 128 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
endmodule
